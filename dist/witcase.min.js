(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Witcase = /** @class */ (function () {
    function Witcase() {
        var _this = this;
        this.views = [];
        this.create = function () {
            _this.defaultAction();
        };
        this.preload = function () {
            for (var _i = 0, _a = Witcase.resourceLoaders; _i < _a.length; _i++) {
                var resourceLoader = _a[_i];
                resourceLoader(_this.engine);
            }
        };
        this.update = function () {
            for (var _i = 0, _a = _this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.updateView();
            }
        };
        this.render = function () {
            for (var _i = 0, _a = _this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.renderView();
            }
        };
    }
    Witcase.create = function () {
        Witcase.current = new Witcase();
        return Witcase.current;
    };
    Witcase.prototype.start = function (engineStarter) {
        this.engine = engineStarter(this);
    };
    Witcase.preload = function (resourceLoader) {
        Witcase.resourceLoaders.push(resourceLoader);
    };
    Witcase.prototype.registerView = function (view) {
        this.views.push(view);
    };
    Witcase.prototype.unregisterView = function (viewToRemove) {
        this.views = this.views.filter(function (view) { return viewToRemove !== view; });
    };
    Witcase.resourceLoaders = [];
    return Witcase;
}());
exports.Witcase = Witcase;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var model_observable_1 = __webpack_require__(7);
var rxjs_1 = __webpack_require__(2);
var _ = __webpack_require__(8);
var ModelObservableFactory = /** @class */ (function () {
    function ModelObservableFactory() {
        this.modelObservables = [];
    }
    ModelObservableFactory.prototype.create = function (getModel) {
        var modelObservable = new model_observable_1.ModelObservable();
        modelObservable.observable = rxjs_1.Observable.create(function (observer) { return modelObservable.observer = observer; }).map(function (model) { return _.cloneDeep(model); }).distinctUntilChanged(function (prev, next) { return _.isEqual(prev, next); });
        modelObservable.getModel = getModel;
        this.modelObservables.push(modelObservable);
        return modelObservable.observable;
    };
    return ModelObservableFactory;
}());
exports.ModelObservableFactory = ModelObservableFactory;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@reactivex/rxjs");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = __webpack_require__(2);
var ViewObservable = /** @class */ (function () {
    function ViewObservable() {
        this.subject = new rxjs_1.Subject();
        this.observable = new rxjs_1.Observable().multicast(this.subject);
    }
    ViewObservable.prototype.subscribe = function (observer) {
        this.observable.subscribe(observer);
    };
    ViewObservable.prototype.publish = function (value) {
        this.subject.next(value);
    };
    return ViewObservable;
}());
exports.ViewObservable = ViewObservable;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var witcase_1 = __webpack_require__(0);
exports.Witcase = witcase_1.Witcase;
var controller_1 = __webpack_require__(5);
exports.Controller = controller_1.Controller;
var view_1 = __webpack_require__(6);
exports.View = view_1.View;
exports.ViewComponent = view_1.ViewComponent;
var model_observable_factory_1 = __webpack_require__(1);
exports.ModelObservableFactory = model_observable_factory_1.ModelObservableFactory;
var view_observable_1 = __webpack_require__(3);
exports.ViewObservable = view_observable_1.ViewObservable;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Controller accepts input from view and converts modifieds the model.
 */
var Controller = /** @class */ (function () {
    function Controller() {
    }
    return Controller;
}());
exports.Controller = Controller;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var witcase_1 = __webpack_require__(0);
var model_observable_factory_1 = __webpack_require__(1);
var view_observable_1 = __webpack_require__(3);
/**
 * Adds a component to the view and other view components
 */
var ViewComponentAdder = /** @class */ (function () {
    function ViewComponentAdder(components, view) {
        this.components = components;
        this.view = view;
    }
    ViewComponentAdder.prototype.addComponent = function (component) {
        this.components.push(component);
        component.createComponent(this, this.view);
        return component;
    };
    return ViewComponentAdder;
}());
exports.ViewComponentAdder = ViewComponentAdder;
/**
 * Input and ouput for the application
 */
var View = /** @class */ (function () {
    //TODO: we should inject with typescript-ioc
    function View(witcase) {
        if (witcase === void 0) { witcase = witcase_1.Witcase.current; }
        this.witcase = witcase;
        this.components = [];
        this.modelObservableFactory = new model_observable_factory_1.ModelObservableFactory();
        this.componentAdder = new ViewComponentAdder(this.components, this);
        this.onCreated = new view_observable_1.ViewObservable();
        this.created = false;
        this.witcase.registerView(this);
    }
    View.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    View.prototype.update = function () {
        //empty, can be overrided or not
    };
    View.prototype.render = function () {
        //empty, can be overrided or not
    };
    View.prototype.show = function () {
        this.createView();
    };
    Object.defineProperty(View.prototype, "engine", {
        get: function () { return this.witcase.engine; },
        enumerable: true,
        configurable: true
    });
    View.prototype.createView = function () {
        if (this.created)
            return;
        this.created = true;
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent(this.componentAdder, this);
        }
        this.create(this.componentAdder);
        this.onCreated.publish();
        this.updateOnModelChange(this.modelObservableFactory);
    };
    View.prototype.hide = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.hideComponent();
        }
    };
    View.prototype.updateView = function () {
        if (!this.created)
            return;
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent(this.componentAdder);
        }
        this.checkModels();
        this.update();
    };
    View.prototype.renderView = function () {
        if (!this.created)
            return;
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.renderComponent();
        }
        this.render();
    };
    View.prototype.destroy = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.destroyComponent();
        }
        this.witcase.unregisterView(this);
        this.destroy();
    };
    View.prototype.updateOnModelChange = function (_modelObservableFactory) {
        //this should be overrided or not
    };
    View.prototype.checkModels = function () {
        for (var _i = 0, _a = this.modelObservableFactory.modelObservables; _i < _a.length; _i++) {
            var modelObservable = _a[_i];
            modelObservable.observer.next(modelObservable.getModel());
        }
    };
    return View;
}());
exports.View = View;
/**
 * Component to be showed in view
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent() {
        this.components = [];
    }
    ViewComponent.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.update = function (_componentAdder) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.render = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.destroy = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.createComponent = function (componentAdder, view) {
        this.view = view;
        this.create(componentAdder);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent(componentAdder, view);
        }
    };
    ViewComponent.prototype.updateComponent = function (componentAdder) {
        this.update(componentAdder);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent(componentAdder);
        }
    };
    ViewComponent.prototype.renderComponent = function () {
        this.render();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.renderComponent();
        }
    };
    ViewComponent.prototype.destroyComponent = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.destroyComponent();
        }
        this.destroy();
    };
    ViewComponent.prototype.hideComponent = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.hideComponent();
        }
        this.hide();
    };
    ViewComponent.prototype.hide = function () {
    };
    Object.defineProperty(ViewComponent.prototype, "engine", {
        get: function () {
            return this.view.engine;
        },
        enumerable: true,
        configurable: true
    });
    return ViewComponent;
}());
exports.ViewComponent = ViewComponent;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ModelObservable = /** @class */ (function () {
    function ModelObservable() {
    }
    return ModelObservable;
}());
exports.ModelObservable = ModelObservable;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,