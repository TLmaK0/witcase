(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Witcase = /** @class */ (function () {
    function Witcase() {
        var _this = this;
        this.views = [];
        this.create = function () {
            _this.defaultAction();
        };
        this.preload = function () {
            for (var _i = 0, _a = Witcase.resourceLoaders; _i < _a.length; _i++) {
                var resourceLoader = _a[_i];
                resourceLoader(_this.engine);
            }
        };
        this.update = function () {
            for (var _i = 0, _a = _this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.updateView();
            }
        };
        this.render = function () {
            for (var _i = 0, _a = _this.views; _i < _a.length; _i++) {
                var view = _a[_i];
                view.renderView();
            }
        };
    }
    Witcase.create = function () {
        Witcase.current = new Witcase();
        return Witcase.current;
    };
    Witcase.prototype.start = function (engineStarter) {
        this.engine = engineStarter(this);
    };
    Witcase.preload = function (resourceLoader) {
        Witcase.resourceLoaders.push(resourceLoader);
    };
    Witcase.prototype.registerView = function (view) {
        this.views.push(view);
    };
    Witcase.prototype.unregisterView = function (viewToRemove) {
        this.views = this.views.filter(function (view) { return viewToRemove !== view; });
    };
    Witcase.resourceLoaders = [];
    return Witcase;
}());
exports.Witcase = Witcase;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var model_observable_1 = __webpack_require__(7);
var rxjs_1 = __webpack_require__(2);
var _ = __webpack_require__(8);
var ModelObservableFactory = /** @class */ (function () {
    function ModelObservableFactory() {
        this.modelObservables = [];
    }
    ModelObservableFactory.prototype.create = function (getModel) {
        var modelObservable = new model_observable_1.ModelObservable();
        modelObservable.observable = rxjs_1.Observable.create(function (observer) { return modelObservable.observer = observer; }).map(function (model) { return _.cloneDeep(model); }).distinctUntilChanged(function (prev, next) { return _.isEqual(prev, next); });
        modelObservable.getModel = getModel;
        this.modelObservables.push(modelObservable);
        return modelObservable.observable;
    };
    return ModelObservableFactory;
}());
exports.ModelObservableFactory = ModelObservableFactory;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@reactivex/rxjs");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = __webpack_require__(2);
var ViewObservable = /** @class */ (function () {
    function ViewObservable() {
        this.subject = new rxjs_1.Subject();
        this.observable = new rxjs_1.Observable().multicast(this.subject);
    }
    ViewObservable.prototype.subscribe = function (observer) {
        this.observable.subscribe(observer);
    };
    ViewObservable.prototype.publish = function (value) {
        this.subject.next(value);
    };
    return ViewObservable;
}());
exports.ViewObservable = ViewObservable;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var witcase_1 = __webpack_require__(0);
exports.Witcase = witcase_1.Witcase;
var controller_1 = __webpack_require__(5);
exports.Controller = controller_1.Controller;
var view_1 = __webpack_require__(6);
exports.View = view_1.View;
exports.ViewComponent = view_1.ViewComponent;
var model_observable_factory_1 = __webpack_require__(1);
exports.ModelObservableFactory = model_observable_factory_1.ModelObservableFactory;
var view_observable_1 = __webpack_require__(3);
exports.ViewObservable = view_observable_1.ViewObservable;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Controller accepts input from view and converts modifieds the model.
 */
var Controller = /** @class */ (function () {
    function Controller() {
    }
    return Controller;
}());
exports.Controller = Controller;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var witcase_1 = __webpack_require__(0);
var model_observable_factory_1 = __webpack_require__(1);
var view_observable_1 = __webpack_require__(3);
/**
 * Adds a component to the view and other view components
 */
var ViewComponentAdder = /** @class */ (function () {
    function ViewComponentAdder(components, view) {
        this.components = components;
        this.view = view;
    }
    ViewComponentAdder.prototype.addComponent = function (component) {
        this.components.push(component);
        component.createComponent(this, this.view);
        return component;
    };
    return ViewComponentAdder;
}());
exports.ViewComponentAdder = ViewComponentAdder;
/**
 * Input and ouput for the application
 */
var View = /** @class */ (function () {
    //TODO: we should inject with typescript-ioc
    function View(witcase) {
        if (witcase === void 0) { witcase = witcase_1.Witcase.current; }
        this.witcase = witcase;
        this.components = [];
        this.modelObservableFactory = new model_observable_factory_1.ModelObservableFactory();
        this.componentAdder = new ViewComponentAdder(this.components, this);
        this.onCreated = new view_observable_1.ViewObservable();
        this.created = false;
        this.witcase.registerView(this);
    }
    View.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    View.prototype.update = function () {
        //empty, can be overrided or not
    };
    View.prototype.render = function () {
        //empty, can be overrided or not
    };
    View.prototype.show = function () {
        this.createView();
    };
    Object.defineProperty(View.prototype, "engine", {
        get: function () { return this.witcase.engine; },
        enumerable: true,
        configurable: true
    });
    View.prototype.createView = function () {
        if (this.created)
            return;
        this.created = true;
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent(this.componentAdder, this);
        }
        this.create(this.componentAdder);
        this.onCreated.publish();
        this.updateOnModelChange(this.modelObservableFactory);
    };
    View.prototype.updateView = function () {
        if (!this.created)
            return;
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent(this.componentAdder);
        }
        this.checkModels();
        this.update();
    };
    View.prototype.renderView = function () {
        if (!this.created)
            return;
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.renderComponent();
        }
        this.render();
    };
    View.prototype.destroy = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.destroyComponent();
        }
        this.witcase.unregisterView(this);
        this.destroy();
    };
    View.prototype.updateOnModelChange = function (_modelObservableFactory) {
        //this should be overrided or not
    };
    View.prototype.checkModels = function () {
        for (var _i = 0, _a = this.modelObservableFactory.modelObservables; _i < _a.length; _i++) {
            var modelObservable = _a[_i];
            modelObservable.observer.next(modelObservable.getModel());
        }
    };
    return View;
}());
exports.View = View;
/**
 * Component to be showed in view
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent() {
        this.components = [];
    }
    ViewComponent.prototype.create = function (_componentAdder) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.update = function (_componentAdder) {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.render = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.destroy = function () {
        //empty, can be overrided or not
    };
    ViewComponent.prototype.createComponent = function (componentAdder, view) {
        this.view = view;
        this.create(componentAdder);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.createComponent(componentAdder, view);
        }
    };
    ViewComponent.prototype.updateComponent = function (componentAdder) {
        this.update(componentAdder);
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.updateComponent(componentAdder);
        }
    };
    ViewComponent.prototype.renderComponent = function () {
        this.render();
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.renderComponent();
        }
    };
    ViewComponent.prototype.destroyComponent = function () {
        for (var _i = 0, _a = this.components; _i < _a.length; _i++) {
            var component = _a[_i];
            component.destroyComponent();
        }
        this.destroy();
    };
    Object.defineProperty(ViewComponent.prototype, "engine", {
        get: function () {
            return this.view.engine;
        },
        enumerable: true,
        configurable: true
    });
    return ViewComponent;
}());
exports.ViewComponent = ViewComponent;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ModelObservable = /** @class */ (function () {
    function ModelObservable() {
    }
    return ModelObservable;
}());
exports.ModelObservable = ModelObservable;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOWY1NDA2Y2RmNmJlYjMwZTBlYTkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dpdGNhc2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVsX29ic2VydmFibGVfZmFjdG9yeS50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAcmVhY3RpdmV4L3J4anNcIiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld19vYnNlcnZhYmxlLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWxfb2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJsb2Rhc2hcIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7QUN0REE7SUFTRTtRQUFBLGlCQUNDO1FBSE8sVUFBSyxHQUFjLEVBQUUsQ0FBQztRQWN2QixXQUFNLEdBQUc7WUFDZCxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQztRQVFNLFlBQU8sR0FBRztZQUNmLEdBQUcsQ0FBQyxDQUF5QixVQUF1QixFQUF2QixZQUFPLENBQUMs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O1NBQzNDO0lBQ0gsQ0FBQztJQUVNLHVDQUFlLEdBQXRCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQW9CLFVBQWUsRUFBZixTQUFJLENBQUMsVUFBVSxFQUFmLGNBQWUsRUFBZixJQUFlO1lBQWxDLElBQU0sU0FBUztZQUNsQixTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRU0sd0NBQWdCLEdBQXZCO1FBQ0UsR0FBRyxDQUFDLENBQW9CLFVBQWUsRUFBZixTQUFJLENBQUMsVUFBVSxFQUFmLGNBQWUsRUFBZixJQUFlO1lBQWxDLElBQU0sU0FBUztZQUNsQixTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUM5QjtRQUNELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsc0JBQWMsaUNBQU07YUFBcEI7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7SUFDSCxvQkFBQztBQUFELENBQUM7QUFwRHFCLHNDQUFhOzs7Ozs7Ozs7O0FDbkduQztJQUFBO0lBSUEsQ0FBQztJQUFELHNCQUFDO0FBQUQsQ0FBQztBQUpZLDBDQUFlOzs7Ozs7O0FDRjVCLG1DIiwiZmlsZSI6IndpdGNhc2UubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOWY1NDA2Y2RmNmJlYjMwZTBlYTkiLCIvKipcbiAqL1xuaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgeyBCYXNlRW5naW5lIH0gZnJvbSAnLi9iYXNlX2VuZ2luZSc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IEd1aWQgfSBmcm9tICcuL2d1aWQnO1xuXG5leHBvcnQgY2xhc3MgV2l0Y2FzZTxUPiBpbXBsZW1lbnRzIEJhc2VFbmdpbmUge1xuICBwdWJsaWMgZW5naW5lOiBUO1xuXG4gIHB1YmxpYyBkZWZhdWx0QWN0aW9uOiAoKSA9PiB2b2lkO1xuXG4gIHB1YmxpYyBzdGF0aWMgY3VycmVudDogYW55O1xuXG4gIHByaXZhdGUgdmlld3M6IFZpZXc8VD5bXSA9IFtdO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKXtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlPFQ+KCl7XG4gICAgV2l0Y2FzZS5jdXJyZW50ID0gbmV3IFdpdGNhc2U8VD4oKTtcbiAgICByZXR1cm4gV2l0Y2FzZS5jdXJyZW50O1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KGVuZ2luZVN0YXJ0ZXI6IChiYXNlRW5naW5lOiBCYXNlRW5naW5lKSA9PiBUKTogdm9pZCB7XG4gICAgdGhpcy5lbmdpbmUgPSBlbmdpbmVTdGFydGVyKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZSA9ICgpOiB2b2lkID0+IHtcbiAgICB0aGlzLmRlZmF1bHRBY3Rpb24oKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlc291cmNlTG9hZGVyczogKChlbmdpbmU6IGFueSkgPT4gdm9pZClbXSA9IFtdO1xuXG4gIHB1YmxpYyBzdGF0aWMgcHJlbG9hZDxUPihyZXNvdXJjZUxvYWRlcjogKGVuZ2luZTogVCk9PnZvaWQpOnZvaWQge1xuICAgIFdpdGNhc2UucmVzb3VyY2VMb2FkZXJzLnB1c2gocmVzb3VyY2VMb2FkZXIpO1xuICB9XG5cbiAgcHVibGljIHByZWxvYWQgPSAoKTogdm9pZCA9PiB7XG4gICAgZm9yIChjb25zdCByZXNvdXJjZUxvYWRlciBvZiBXaXRjYXNlLnJlc291cmNlTG9hZGVycyl7XG4gICAgICByZXNvdXJjZUxvYWRlcih0aGlzLmVuZ2luZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZSA9ICgpOiB2b2lkID0+IHtcbiAgICBmb3IgKGNvbnN0IHZpZXcgb2YgdGhpcy52aWV3cyl7XG4gICAgICB2aWV3LnVwZGF0ZVZpZXcoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyID0gKCk6IHZvaWQgPT4ge1xuICAgIGZvciAoY29uc3QgdmlldyBvZiB0aGlzLnZpZXdzKXtcbiAgICAgIHZpZXcucmVuZGVyVmlldygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclZpZXcodmlldzogVmlldzxUPil7XG4gICAgdGhpcy52aWV3cy5wdXNoKHZpZXcpO1xuICB9XG5cbiAgcHVibGljIHVucmVnaXN0ZXJWaWV3KHZpZXdUb1JlbW92ZTogVmlldzxUPil7XG4gICAgdGhpcy52aWV3cyA9IHRoaXMudmlld3MuZmlsdGVyKCh2aWV3KSA9PiB7IHJldHVybiB2aWV3VG9SZW1vdmUgIT09IHZpZXcgfSk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy93aXRjYXNlLnRzIiwiaW1wb3J0IHsgTW9kZWxPYnNlcnZhYmxlIH0gZnJvbSAnLi9tb2RlbF9vYnNlcnZhYmxlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAnQHJlYWN0aXZleC9yeGpzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGNsYXNzIE1vZGVsT2JzZXJ2YWJsZUZhY3Rvcnkge1xuICBwdWJsaWMgbW9kZWxPYnNlcnZhYmxlczogTW9kZWxPYnNlcnZhYmxlPGFueT5bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCl7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlPFQ+KGdldE1vZGVsOiAoKSA9PiBUKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3QgbW9kZWxPYnNlcnZhYmxlID0gbmV3IE1vZGVsT2JzZXJ2YWJsZTxUPigpO1xuXG4gICAgbW9kZWxPYnNlcnZhYmxlLm9ic2VydmFibGUgPSBPYnNlcnZhYmxlLmNyZWF0ZShcbiAgICAgIChvYnNlcnZlcjogT2JzZXJ2ZXI8KCkgPT4gVD4pID0+IG1vZGVsT2JzZXJ2YWJsZS5vYnNlcnZlciA9IG9ic2VydmVyXG4gICAgKS5tYXAoXG4gICAgICAobW9kZWw6IFQpID0+IF8uY2xvbmVEZWVwKG1vZGVsKVxuICAgICkuZGlzdGluY3RVbnRpbENoYW5nZWQoXG4gICAgICAocHJldjogVCwgbmV4dDogVCkgPT4gXy5pc0VxdWFsKHByZXYsIG5leHQpXG4gICAgKTtcblxuICAgIG1vZGVsT2JzZXJ2YWJsZS5nZXRNb2RlbCA9IGdldE1vZGVsO1xuXG4gICAgdGhpcy5tb2RlbE9ic2VydmFibGVzLnB1c2gobW9kZWxPYnNlcnZhYmxlKTsgXG5cbiAgICByZXR1cm4gbW9kZWxPYnNlcnZhYmxlLm9ic2VydmFibGU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2RlbF9vYnNlcnZhYmxlX2ZhY3RvcnkudHMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJAcmVhY3RpdmV4L3J4anNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJAcmVhY3RpdmV4L3J4anNcIlxuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgU3ViamVjdCB9IGZyb20gJ0ByZWFjdGl2ZXgvcnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBWaWV3T2JzZXJ2YWJsZTxUPiB7XG4gIHByaXZhdGUgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxUPjtcbiAgcHJpdmF0ZSBzdWJqZWN0OiBTdWJqZWN0PFQ+O1xuXG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy5zdWJqZWN0ID0gbmV3IFN1YmplY3Q8VD4oKTtcbiAgICB0aGlzLm9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxUPigpLm11bHRpY2FzdCh0aGlzLnN1YmplY3QpO1xuICB9XG5cbiAgcHVibGljIHN1YnNjcmliZShvYnNlcnZlcjogKHQ6IFQpID0+IHZvaWQpe1xuICAgIHRoaXMub2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICB9XG5cbiAgcHVibGljIHB1Ymxpc2godmFsdWU/OiBUKXtcbiAgICB0aGlzLnN1YmplY3QubmV4dCh2YWx1ZSk7XG4gIH1cbn1cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3ZpZXdfb2JzZXJ2YWJsZS50cyIsImV4cG9ydCB7IFdpdGNhc2UgfSBmcm9tICcuL3dpdGNhc2UnO1xuZXhwb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJy4vY29udHJvbGxlcic7XG5leHBvcnQgeyBWaWV3LCBWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi92aWV3JztcbmV4cG9ydCB7IE1vZGVsT2JzZXJ2YWJsZUZhY3RvcnkgfSBmcm9tICcuL21vZGVsX29ic2VydmFibGVfZmFjdG9yeSc7XG5leHBvcnQgeyBWaWV3T2JzZXJ2YWJsZSB9IGZyb20gJy4vdmlld19vYnNlcnZhYmxlJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC50cyIsIi8qKlxuICogQ29udHJvbGxlciBhY2NlcHRzIGlucHV0IGZyb20gdmlldyBhbmQgY29udmVydHMgbW9kaWZpZWRzIHRoZSBtb2RlbC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnRyb2xsZXIge1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnRyb2xsZXIudHMiLCJpbXBvcnQgeyBXaXRjYXNlIH0gZnJvbSAnLi93aXRjYXNlJztcbmltcG9ydCB7IE1vZGVsT2JzZXJ2YWJsZSB9IGZyb20gJy4vbW9kZWxfb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBNb2RlbE9ic2VydmFibGVGYWN0b3J5IH0gZnJvbSAnLi9tb2RlbF9vYnNlcnZhYmxlX2ZhY3RvcnknO1xuaW1wb3J0IHsgVmlld09ic2VydmFibGUgfSBmcm9tICcuL3ZpZXdfb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogQWRkcyBhIGNvbXBvbmVudCB0byB0aGUgdmlldyBhbmQgb3RoZXIgdmlldyBjb21wb25lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3Q29tcG9uZW50QWRkZXI8VD4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBvbmVudHM6IFZpZXdDb21wb25lbnQ8VD5bXSwgcHJpdmF0ZSB2aWV3OiBWaWV3PFQ+KSB7fVxuXG4gIHB1YmxpYyBhZGRDb21wb25lbnQ8UyBleHRlbmRzIFZpZXdDb21wb25lbnQ8VD4+KGNvbXBvbmVudDogUyk6IFMge1xuICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgY29tcG9uZW50LmNyZWF0ZUNvbXBvbmVudCh0aGlzLCB0aGlzLnZpZXcpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfVxufVxuXG4vKipcbiAqIElucHV0IGFuZCBvdXB1dCBmb3IgdGhlIGFwcGxpY2F0aW9uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWaWV3PFQ+IHtcbiAgcHJvdGVjdGVkIGNvbXBvbmVudHM6IFZpZXdDb21wb25lbnQ8VD5bXSA9IFtdO1xuICBwcml2YXRlIG1vZGVsT2JzZXJ2YWJsZUZhY3Rvcnk6IE1vZGVsT2JzZXJ2YWJsZUZhY3RvcnkgPSBuZXcgTW9kZWxPYnNlcnZhYmxlRmFjdG9yeSgpO1xuICBwcml2YXRlIGNvbXBvbmVudEFkZGVyOiBWaWV3Q29tcG9uZW50QWRkZXI8VD4gPSBuZXcgVmlld0NvbXBvbmVudEFkZGVyPFQ+KHRoaXMuY29tcG9uZW50cywgdGhpcyk7XG4gIHB1YmxpYyBvbkNyZWF0ZWQ6IFZpZXdPYnNlcnZhYmxlPHZvaWQ+ID0gbmV3IFZpZXdPYnNlcnZhYmxlPHZvaWQ+KCk7XG4gIHByaXZhdGUgY3JlYXRlZCA9IGZhbHNlO1xuXG4gIC8vVE9ETzogd2Ugc2hvdWxkIGluamVjdCB3aXRoIHR5cGVzY3JpcHQtaW9jXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgd2l0Y2FzZTogV2l0Y2FzZTxUPiA9IFdpdGNhc2UuY3VycmVudCl7XG4gICAgdGhpcy53aXRjYXNlLnJlZ2lzdGVyVmlldyh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGUoX2NvbXBvbmVudEFkZGVyOiBWaWV3Q29tcG9uZW50QWRkZXI8VD4pIHtcbiAgICAvL2VtcHR5LCBjYW4gYmUgb3ZlcnJpZGVkIG9yIG5vdFxuICB9XG4gIHB1YmxpYyB1cGRhdGUoKSB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIC8vZW1wdHksIGNhbiBiZSBvdmVycmlkZWQgb3Igbm90XG4gIH1cblxuICBwdWJsaWMgc2hvdygpIHtcbiAgICB0aGlzLmNyZWF0ZVZpZXcoKTtcbiAgfVxuXG4gIGdldCBlbmdpbmUoKTogVCB7IHJldHVybiB0aGlzLndpdGNhc2UuZW5naW5lOyB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVWaWV3KCkge1xuICAgIGlmICh0aGlzLmNyZWF0ZWQpIHJldHVybjtcbiAgICB0aGlzLmNyZWF0ZWQgPSB0cnVlO1xuXG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICBjb21wb25lbnQuY3JlYXRlQ29tcG9uZW50KHRoaXMuY29tcG9uZW50QWRkZXIsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSh0aGlzLmNvbXBvbmVudEFkZGVyKTtcbiAgICB0aGlzLm9uQ3JlYXRlZC5wdWJsaXNoKCk7XG4gICAgdGhpcy51cGRhdGVPbk1vZGVsQ2hhbmdlKHRoaXMubW9kZWxPYnNlcnZhYmxlRmFjdG9yeSk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlVmlldygpIHtcbiAgICBpZiAoIXRoaXMuY3JlYXRlZCkgcmV0dXJuO1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LnVwZGF0ZUNvbXBvbmVudCh0aGlzLmNvbXBvbmVudEFkZGVyKTtcbiAgICB9XG4gICAgdGhpcy5jaGVja01vZGVscygpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyVmlldygpIHtcbiAgICBpZiAoIXRoaXMuY3JlYXRlZCkgcmV0dXJuO1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LnJlbmRlckNvbXBvbmVudCgpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICBjb21wb25lbnQuZGVzdHJveUNvbXBvbmVudCgpO1xuICAgIH1cbiAgICB0aGlzLndpdGNhc2UudW5yZWdpc3RlclZpZXcodGhpcyk7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlT25Nb2RlbENoYW5nZShfbW9kZWxPYnNlcnZhYmxlRmFjdG9yeTogTW9kZWxPYnNlcnZhYmxlRmFjdG9yeSl7XG4gICAgLy90aGlzIHNob3VsZCBiZSBvdmVycmlkZWQgb3Igbm90XG4gIH1cblxuICBwcml2YXRlIGNoZWNrTW9kZWxzKCl7XG4gICAgZm9yKGNvbnN0IG1vZGVsT2JzZXJ2YWJsZSBvZiB0aGlzLm1vZGVsT2JzZXJ2YWJsZUZhY3RvcnkubW9kZWxPYnNlcnZhYmxlcyl7XG4gICAgICBtb2RlbE9ic2VydmFibGUub2JzZXJ2ZXIubmV4dChtb2RlbE9ic2VydmFibGUuZ2V0TW9kZWwoKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIGJlIHNob3dlZCBpbiB2aWV3XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWaWV3Q29tcG9uZW50PFQ+IHtcbiAgcHVibGljIHZpZXc6IFZpZXc8VD47XG4gIHByb3RlY3RlZCBjb21wb25lbnRzOiBWaWV3Q29tcG9uZW50PFQ+W10gPSBbXTtcblxuICBwdWJsaWMgY3JlYXRlKF9jb21wb25lbnRBZGRlcjogVmlld0NvbXBvbmVudEFkZGVyPFQ+KTogdm9pZCB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoX2NvbXBvbmVudEFkZGVyOiBWaWV3Q29tcG9uZW50QWRkZXI8VD4pOiB2b2lkIHtcbiAgICAvL2VtcHR5LCBjYW4gYmUgb3ZlcnJpZGVkIG9yIG5vdFxuICB9XG5cbiAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcbiAgICAvL2VtcHR5LCBjYW4gYmUgb3ZlcnJpZGVkIG9yIG5vdFxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgLy9lbXB0eSwgY2FuIGJlIG92ZXJyaWRlZCBvciBub3RcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVDb21wb25lbnQoY29tcG9uZW50QWRkZXI6IFZpZXdDb21wb25lbnRBZGRlcjxUPiwgdmlldzogVmlldzxUPik6IHZvaWQge1xuICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgdGhpcy5jcmVhdGUoY29tcG9uZW50QWRkZXIpO1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRBZGRlciwgdmlldyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZUNvbXBvbmVudChjb21wb25lbnRBZGRlcjogVmlld0NvbXBvbmVudEFkZGVyPFQ+KTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGUoY29tcG9uZW50QWRkZXIpO1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LnVwZGF0ZUNvbXBvbmVudChjb21wb25lbnRBZGRlcik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbmRlckNvbXBvbmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LnJlbmRlckNvbXBvbmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95Q29tcG9uZW50KCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgY29tcG9uZW50LmRlc3Ryb3lDb21wb25lbnQoKTtcbiAgICB9XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGVuZ2luZSgpOiBUIHtcbiAgICByZXR1cm4gdGhpcy52aWV3LmVuZ2luZTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3ZpZXcudHMiLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciB9IGZyb20gJ0ByZWFjdGl2ZXgvcnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBNb2RlbE9ic2VydmFibGU8VD4ge1xuICBvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPFQ+O1xuICBvYnNlcnZlcjogT2JzZXJ2ZXI8KCkgPT4gVD47XG4gIGdldE1vZGVsOiAoKSA9PiBUO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZGVsX29ic2VydmFibGUudHMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJsb2Rhc2hcIlxuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9